
' This is just the code that transposes the Display buffer to Reg buffer
' without #Ifdef RevDig clutter

#Ifdef Com_Anode
  Dim BitCnt, Tmp_2, AddrN, Rpt, RegPtr, RegBitIdx as byte
  Dim RegBuf(16+1) as Byte ' TM1638 register buffer for ComAnode display

   For BufIndx = 1 to 16
       RegBuf(BufIndx) = 0  '       ClrRegbufer
   Next '

   For BufIndx = 1 to TM_DispLen   '< Digits to process
        If BufIndx < 9 then RegBitIdx = BufIndx -1 Else RegBitIdx = BufIndx -1 -8
        BitCnt = 0 ': Tmp_2 = 0
        Tmp_1 = DBuf(BufIndx)   '< each buf byte
      Repeat 8                 '< 8 bits to transpose
        If BufIndx < 9 then AddrN = (BitCnt*2) +1 Else AddrN = (BitCnt*2) +2 ' <7us
        Tmp_2 = RegBuf(AddrN)
        Tmp_2.RegBitIdx = Tmp_1.BitCnt    ' get each bit from digit buf byte
        RegBuf(AddrN) = Tmp_2
        BitCnt++
      End Repeat
   Next

'     Send the Reg buffer
      set TM1638_STB 0
        TM1638_WrVal (TMcmd1) ' Seq. address mode 40h
      set TM1638_STB 1
        Wait TMdly us

      set TM1638_STB 0
        TM1638_WrVal TMaddr               ' C0h First Reg addr
   For BufIndx = 1 to 16                  ' send all registers
        TM1638_WrVal (RegBuf(BufIndx))     ' Digit data
   Next
      set TM1638_STB 1
        Wait TMdly us
      tmCtrlSnd
 #endif