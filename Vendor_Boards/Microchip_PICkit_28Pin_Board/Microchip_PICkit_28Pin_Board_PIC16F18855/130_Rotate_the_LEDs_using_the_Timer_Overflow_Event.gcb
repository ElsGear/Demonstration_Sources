'''
'''******************************************************************
'''
'''  Timer0 is a counter implemented in the processor. It may be used to count instruction
'''  cycles or external events, that occur at or below the instruction cycle rate.
'''  In thE pic, Timer0 can be used as either an 8-bit or 16-bit counter, or timer. The
'''  enhanced mid-range core implements only an 8-bit counter.
'''  This lesson configures Timer0 to count instruction cycles and to set a flag when it rolls
'''  over. This frees up the processor to do meaningful work rather than wasting instruction
'''  cycles in a timing loop.
'''  Using a counter provides a convenient method of measuring time or delay loops as it
'''  allows the processor to work on other tasks rather than counting instruction cycles.
'''
'''
'''  LEDs rotate from right to left, similar to previous demonstrations, at a rate of 1 seconds.
'''
'''
'''  PIC: 16F18855
'''  Compiler: GCB
'''  IDE: GC Studio
'''
'''  Board: PICKit 28-Pin Demo Board
'''  Date: 1.12.2022
'''
' ----- Configuration
#CHIP 16f18855
#OPTION Explicit
 
'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:   -----------------------------ADC--
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------LED--LED-LED LED--
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' ------------------PORTE-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----------------SW---------------
''-----------------------------------------
''



'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDPORT LATB

Dir     RB0         Out
Dir     RB1         Out
Dir     RB2         Out
Dir     RB3         Out

#DEFINE POTENTIOMETER RA0
Dir     POTENTIOMETER In

#DEFINE SWITCHIN      RE3

'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.


Dim TIMEOUT As Byte

'   Set the first LED on
Set RB3 On


'   Initialise the timer.
'   Firstly tell the compiler to use a 16bit timer for this demonstration
#DEFINE TMR0_16BIT

'     For this timer we need the following:
'       Prescaler
'           1:256
'            HF int Osc, and
'            NOT to sync Timer
'       Post scaler
'           1:2
'Event will be raised every 1.04s
InitTimer0 Osc, PRE0_256 + TMR0_HFINTOSC ,  POST0_2
'   Set the type of event
On Interrupt Timer0Overflow Call blink
SetTimer ( 0, 0x0bdc )
'     Start the Timer - you need to start this Timer0!
StartTimer 0

Do Forever

    If TimeOut = 1 Then

        ' Rotate our LEDs
        Set C Off
        Rotate LEDPORT Right
        If C = 1 Then RB3 = 1

        TimeOut= 0
        ' Set timer to 1 second`
        SetTimer ( 0, 0x0bdc )

    End If




Loop


Sub blink
    TimeOut = 1
    'Clear the Timer0 overflow event
    TMR0IF = 0
End Sub
