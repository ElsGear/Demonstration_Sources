'''
'''  This demonstration produces a variable speed rotating LED display that is proportional to the ADC value.
'''  The ADC value and LED rotate speed are inversely proportional to each other.
'''
'''  Rotate the POT counterclockwise to see the LEDs shift faster.
'''
'''  Press the SWITCHIN to reverse the direction of the LEDs.
'''
'''
'''  PIC: 16F18855
'''  Compiler: GCB
'''  IDE: GC Studio
'''
'''  Board: PICKit 28-Pin Demo Board
'''  Date: 1.12.2022
''' 
' ----- Configuration
#CHIP 16f18855
#OPTION EXPLICIT

 
'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:   -----------------------------ADC--
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------LED--LED-LED LED--
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' ------------------PORTE-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----------------SW---------------
''-----------------------------------------
''

#DEFINE SWITCH_DOWN         0
#DEFINE SWITCH_UP           1

#DEFINE LED_RIGHT           TRUE
#DEFINE LED_LEFT            FALSE

#DEFINE SWITCHIN          PORTE.3

Dim direction As Byte
Dim leds      As Byte
Dim mydelay   As Word

'start from the right to left
direction = LED_RIGHT

Dir porta Out
leds = 8

'Potentitor is connected to RA4...set as input
Dir PORTA.0 In

Do

    mydelay = ReadAD10( AN0 )

    ' Factor the ADC reading to delay value
    mydelay = Scale ( mydelay, 0, 1023, 100, 1000 )

    Wait mydelay ms

    ' Is the switch pressed? 
    If check_SWITCH = TRUE Then
        ' toggle the direction
        direction = !direction
    End If

    ' Set the state of the led port using the variable `leds`
    PORTB = leds

    ' handle the rotation of the variable `leds`
    If  direction = LED_RIGHT  Then
        'shift to the right by 1

        Rotate leds Right

        ' when the ROTATE moves the bit to bit, when equals zero, restart the pattern
        ' 8     1000
        ' 4     0100
        ' 2     0010
        ' 1     0001
        ' 0     0000 so, reset back to 8
        If leds = 0 Then
            leds = 8
        End If

    Else
        'Set C off to ensure the carry bit does not impact
        Set C Off
        Rotate leds Left

        'when the last LED is lit, restart the pattern
        If  leds = 16 Then
            leds = 1
        End If
    End If

Loop


'a function that returns the state of the switch
'global variable - if button is held down, we don't want to keep on switching directions
Dim previous_state As BIT
previous_state = SWITCH_UP

Function  check_switch
    'SWITCHIN is normally open to 5V ...when pressed, RA3 is connected to GND
    If (SWITCHIN = SWITCH_DOWN) Then
        'debounce by delaying and checking if SWITCHIN is still pressed
        Wait 1 ms
        If ( (previous_state =  SWITCH_DOWN) & (SWITCHIN = SWITCH_DOWN) ) Then
            ' don't toggle
            check_switch = FALSE
            Exit Function
        Else
            ' check if still down
            If (SWITCHIN = SWITCH_DOWN) Then
                previous_state = SWITCH_DOWN
                ' reverse the LEDs
                check_switch = TRUE
                Exit Function
            Else
                'SWITCHIN not properly held down
                previous_state = SWITCH_UP
                ' don't reverse
                check_switch = FALSE
                Exit Function
            End If
        End If
    Else
        'SWITCHIN not pressed
        previous_state = SWITCH_UP
        'don't reverse
        check_switch = FALSE
        Exit Function
    End If

End Function
