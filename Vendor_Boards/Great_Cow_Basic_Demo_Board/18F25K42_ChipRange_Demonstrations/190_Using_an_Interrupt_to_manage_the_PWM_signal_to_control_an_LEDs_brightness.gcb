'''
''' This demonstration will show how you can control a motor using a PWM signal.
'''
''' Pulse-Width Modulation (PWM) is a scheme that provides power to a load by switching
''' quickly between fully on and fully off states. The PWM signal resembles a square wave
''' where the high portion of the signal is considered the on state and the low portion of
''' the signal is considered the off state. The high portion, also known as the pulse width,
''' can vary in time and is defined in steps. A longer, high on time will illuminate the LED
''' brighter. The frequency or period of the PWM does not change.
'''
''' This program demostrates a method where the number of steps applied,
''' which lengthens the pulse width are calculated in an Interrupt routine.
''' The PWM period defined as the duration of one complete cycle or the total
''' amount of on and off time combined is based on a simple counter.
'''
''' The demo varies the PWM to the LED.  We are pretending the motor is connected to Portb.1, via a suitable motor control device.
'''
'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.01
'''@date    22.10.2017
' ----- Configuration

'Chip Settings.
#CHIP 18f25k42, 64
#OPTION Explicit
#CONFIG mclr=On

#STARTUP InitPPS, 85

Sub InitPPS

    'Module: UART1
    'TX1 > RC6
    RC6PPS = 0x0013
    'RC7 > RX1
    U1RXPPS = 0x0017

End Sub

'Template comment at the end of the config file


'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    -------| O | ----------| O | I |-
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    -------------------| X |---------
''-----------------------------------------
''


#DEFINE LEDD1 PORTB.1
#DEFINE LEDD2 PORTB.5
#DEFINE SwitchIn        PORTB.0


Dir     LEDD1         Out
Dir     LEDD2         Out
Dir     SwitchIn      In

'Setup Serial port
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_TX_BLOCKING


'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.

Dim speed, MotorSpeed, PWMCounter As Byte

'We are pretending the motor is connected to Portb.1, via a suitable motor control device.
#DEFINE MOTOR PORTB.1
Dir MOTOR Out

'Call the initialisation routine
InitMotorControl

'Main routine
Do
    'Increase speed to full over 2.5 seconds
    For Speed = 0 To 100
        MotorSpeed = Speed
        Wait 25 ms
    Next
    'Hold speed
    Wait 1 s
    'Decrease speed to zero over 2.5 seconds
    For Speed = 100 To 0
        MotorSpeed = Speed
        Wait 25 ms
    Next
    'Hold speed
    Wait 1 s
Loop

'Setup routine
Sub InitMotorControl
    'Clear variables
    MotorSpeed = 0
    PWMCounter = 0

    'Add a handler for the interrupt
    On Interrupt Timer0Overflow Call PWMHandler
    InitTimer0 Osc, PRE0_1 + TMR0_FOSC4 ,  POST0_1
    StartTimer 0

End Sub

'PWM sub
'This will be called when Timer 0 overflows
Sub PWMHandler

    If MotorSpeed > PWMCounter Then
        Set MOTOR On
    Else
        Set MOTOR Off
    End If
    PWMCounter += 1
    If PWMCounter = 100 Then PWMCounter = 0

End Sub
