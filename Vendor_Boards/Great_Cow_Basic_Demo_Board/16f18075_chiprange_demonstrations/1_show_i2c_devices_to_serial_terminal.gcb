'''
'''  This demonstration shows the I2C devices attached the microcontroller, this program support the Microchip I2C module.
'''
'''  I2C device required a data bus and a clock bus, devices also required an input voltage and 0v.
'''   I2C data bus is connected to port shown below.
'''   I2C clock bus is connected to port shown below.
'''   Serial output is connected, as previously, to port shown below.
'''
'''  Connect your I2C devices and see the results on the serial terminal.
'''
'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.02
'''@date    15/09/2022
' ----- Configuration

'Chip Settings.
#CHIP 16F18075, 16
#OPTION Explicit
#config MCLRE=EXTMCLR

    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.6.3
    'PinManager data: v1.81.8
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 16LF18875

    Sub InitPPS

    'Module: EUSART
            RC6PPS = 0x000E    'TX > RC6

            'Module: MSSP1
            SSP1CLKPPS = 0x13;  //RC3->MSSP1:SCL1;
            RC3PPS = 0x15;  //RC3->MSSP1:SCL1;
            SSP1DATPPS = 0x14;  //RC4->MSSP1:SDA1;
            RC4PPS = 0x16;  //RC4->MSSP1:SDA1;

    End Sub
    'Template comment at the end of the config file


'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    --------IN-LED--LED-LED LED -----
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----TX------SDA-SCL--------------
''-----------------------------------------
''

'' ------------------PORTE-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----------------RST--------------
''-----------------------------------------
''

'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDD1 PORTB.1
#DEFINE LEDD2 PORTB.2
#DEFINE LEDD3 PORTB.3
#DEFINE LEDD4 PORTB.4
#DEFINE LEDPORT LATB

HSerPrintStringCRLF "start"

Dir     LEDD1         Out
Dir     LEDD2         Out
Dir     LEDD3         Out
Dir     LEDD4         Out

#DEFINE POTENTIOMETER PORTA.0
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTB.5
Dir     SWITCHIN      In

'Setup Serial port
#DEFINE USART_BAUD_RATE 115200
#DEFINE USART_TX_BLOCKING

' Define I2C settings
#DEFINE HI2C_BAUD_RATE 100
#DEFINE HI2C_DATA PORTC.4
#DEFINE HI2C_CLOCK PORTC.3
'Initialise I2C - note for the I2C module the ports need to be set to correct direction
Dir HI2C_DATA In
Dir HI2C_CLOCK In

// HI2CMode Master
Dim HI2CCURRENTMODE
HI2CCURRENTMODE = 12
    // LATA = 0x0;
    // LATB = 0x0;
    // LATC = 0x18;
    // LATD = 0x0;
    // LATE = 0x0;

    // /**
    // TRISx registers
    // */
    // TRISA = 0xFF;
    // TRISB = 0xFD;
    // TRISC = 0xBF;
    // TRISD = 0xFF;
    // TRISE = 0xF;

    // /**
    // ANSELx registers
    // */
    // ANSELA = 0xFF;
    // ANSELB = 0xDD;
    // ANSELC = 0x87;
    // ANSELD = 0xFF;
    // ANSELE = 0x7;

    
'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.

Dim DeviceID As Byte
Dim DISPLAYNEWLINE As Byte

wait 1 s 

    /* CKE disabled; SMP Standard Speed;  */
    SSP1STAT = 0x80;
    /* SSPM FOSC/4_SSPxADD_I2C; CKP disabled; SSPEN disabled;  */
    SSP1CON1 = 0x28;
    /* SEN disabled; RSEN disabled; PEN disabled; RCEN disabled; ACKEN disabled; ACKDT acknowledge; GCEN disabled;  */
    SSP1CON2 = 0x0;
    /* DHEN disabled; AHEN disabled; SBCDE disabled; SDAHT 100ns; BOEN disabled; SCIE disabled; PCIE disabled;  */
    SSP1CON3 = 0x0;
    /* SSPADD 79;  */
    SSP1ADD = 0x27;

    // Repeat 10
    //     SSP1CON1bits.SSPEN = 0;
    //     wait 5 ms
        
    //     SSP1CON1bits.SSPEN = 1;
    //     wait 5 ms
    // End Repeat

    DeviceID = 0x75
    // dir portb.1 OUT
    // PIE1=255
    // PIE2=255
    // PIE3=255
    // PIE4=255

    // SSP1CON2bits.PEN = 1;    
                // RCEN1 = 1
                // Wait Until SSP1STAT.BF = 1 AND SSP1IF = 1
                // SSP1IF = 0

                // dim inbyte
                //         inbyte = SSP1BUF 
                // SSP1CON2bits.SSP1IF = 0''Support for SSPIF

                // SSP1CON2bits.ACKDT = 0; Send ACK DATA now. ' bsf SSPCON2,ACKEN
                // // //    ' Clear flag - this is required
                // SSP1STAT.BF = 0
                // wait 100 us
                // SSP1IF = 0 

HserPrintCRLF
HserPrint "0DEV  ": HserPrint HEx(DeviceID):HSerSend 9
HserPrint HEx(PIR1):HSerSend 9
HserPrint HEx(PIR2):HSerSend 9
HserPrint HEx(PIR3):HSerSend 9
HserPrint HEx(PIR4):HSerSend 9
HserPrint HEx(SSP1STAT):HSerSend 9
HserPrint HEx(SSP1Con1):HSerSend 9
HserPrint HEx(SSP1con2):HSerSend 9
HserPrint HEx(SSP1con3)

Do
    If SSP1STATbits.S = 0  Then
        BCL1IF = 0
        SSP1CON2.ACKEN = 0;
        SSP1IF = 0
        SSP1CON2.SEN1 = 1
        HI2CWaitMSSP
        SSP1IF = 0
        SSP1BUF = DeviceID
        HI2CWaitMSSP
        SSP1IF = 0

        If  ( SSP1CON2bits.ACKSTAT = 0 ) & ( DeviceID.0 = 1 ) Then
        
            RCEN1 = 1
            Wait Until SSP1STAT.BF = 1 AND SSP1IF = 1
            SSP1IF = 0
            dim inbyte
            inbyte = SSP1BUF
            ACKDT = 0
            ACKEN = 0

        End if
        SSP1CON2bits.PEN = 1;
        HI2CWaitMSSP

            DeviceID++




    End If

Loop

Dim HI2CWaitMSSPTimeout as byte
sub HI2CWaitMSSP


    HI2CWaitMSSPTimeout = 0
    HI2CWaitMSSPWait:
    HI2CWaitMSSPTimeout++
    if HI2CWaitMSSPTimeout < 255 then
        #ifdef bit(SSP1IF)
            ''Support for SSP1IF
            if SSP1IF = 0 then goto HI2CWaitMSSPWait
            SSP1IF = 0
            exit Sub
        #endif

        #ifdef bit(SSPIF)
            ''Support for SSPIF
            if SSPIF = 0 then goto HI2CWaitMSSPWait
            SSPIF = 0
            exit Sub
        #endif

        #ifndef  bit(SSP1IF)
          #ifndef  bit(SSPIF)
            ' no int flag so wait a while and exit
            wait 1 us
          #endif
        #endif
    end if

end sub
