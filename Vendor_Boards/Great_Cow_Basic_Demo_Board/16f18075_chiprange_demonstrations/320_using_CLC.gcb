'''
'''This demonstration program is a simple CLC to show a 'no code' switch to turn on the LEDs.
'''
'''This program demonstrates CLC - the hardware within the uC that can be controlled via GCB
'''
'''Please note - the switch has moved to PORTC.0 - this is a CLC inpput constraint.
'''
'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.01
'''@date    18/10/2022
' ----- Configuration


#CHIP 16F18075
#OPTION Explicit


'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    -----------LED--LED-LED LED -----
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    -----------------------------IN--
''-----------------------------------------
''

'' ------------------PORTE-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----------------RST--------------
''-----------------------------------------
''



    'Template comment at the start of the config file
    '
    #startup InitPPS, 85


    Sub InitPPS

        CLCIN0PPS = 0x10; //RC0->CLC3:CLCIN0;
        RB1PPS = 0x03;  //RB1->CLC3:CLC3OUT;
        RB2PPS = 0x03;  //RB2->CLC3:CLC3OUT;
        RB3PPS = 0x03;  //RB3->CLC3:CLC3OUT;
        RB4PPS = 0x03;  //RB4->CLC3:CLC3OUT;


    End Sub
    'Template comment at the end of the config file



    ' Set the CLC1


    // SLCT 0x2; 
    CLCSELECT = 0x2;
    // LCG1POL not_inverted; LCG2POL not_inverted; LCG3POL not_inverted; LCG4POL not_inverted; LCPOL not_inverted; 
    CLCnPOL = 0x0;
    // LCD1S CLCIN0 (CLCIN0PPS); 
    CLCnSEL0 = 0x0;
    // LCD2S CLCIN0 (CLCIN0PPS); 
    CLCnSEL1 = 0x0;
    // LCD3S CLCIN0 (CLCIN0PPS); 
    CLCnSEL2 = 0x0;
    // LCD4S CLCIN0 (CLCIN0PPS); 
    CLCnSEL3 = 0x0;
    // LCG1D1N disabled; LCG1D1T enabled; LCG1D2N disabled; LCG1D2T disabled; LCG1D3N disabled; LCG1D3T disabled; LCG1D4N disabled; LCG1D4T disabled; 
    CLCnGLS0 = 0x2;
    // LCG2D1N disabled; LCG2D1T disabled; LCG2D2N disabled; LCG2D2T disabled; LCG2D3N disabled; LCG2D3T disabled; LCG2D4N disabled; LCG2D4T disabled; 
    CLCnGLS1 = 0x0;
    // LCG3D1N disabled; LCG3D1T disabled; LCG3D2N disabled; LCG3D2T disabled; LCG3D3N disabled; LCG3D3T disabled; LCG3D4N disabled; LCG3D4T disabled; 
    CLCnGLS2 = 0x0;
    // LCG4D1N disabled; LCG4D1T disabled; LCG4D2N disabled; LCG4D2T disabled; LCG4D3N disabled; LCG4D3T disabled; LCG4D4N disabled; LCG4D4T disabled; 
    CLCnGLS3 = 0x0;
    // LCOUT 0x00; 
    CLCDATA = 0x0;
    // LCMODE OR-XOR; LCINTN disabled; LCINTP disabled; LCEN enabled; 
    CLCnCON = 0x81;

'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDD1 PORTB.1
#DEFINE LEDD2 PORTB.2
#DEFINE LEDD3 PORTB.3
#DEFINE LEDD4 PORTB.4
#DEFINE LEDPORT LATB


Dir     LEDD1         Out
Dir     LEDD2         Out
Dir     LEDD3         Out
Dir     LEDD4         Out

#DEFINE SWITCHIN      PORTC.0
Dir     SWITCHIN      In


' *******************************************************************************
'  Main code start here....

    Do
    Loop
