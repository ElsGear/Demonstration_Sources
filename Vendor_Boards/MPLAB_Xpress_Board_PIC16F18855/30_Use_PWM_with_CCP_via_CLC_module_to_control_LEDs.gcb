'''
'''******************************************************************
'''
''' Pulse-Width Modulation (PWM) is a scheme that provides power to a load by switching
''' quickly between fully on and fully off states. The PWM signal resembles a square wave
''' where the high portion of the signal is considered the on state and the low portion of
''' the signal is considered the off state. The high portion, also known as the pulse width,
''' can vary in time and is defined in steps. A longer, high on time will illuminate the LED
''' brighter. The frequency or period of the PWM does not change. A larger number of
''' steps applied, which lengthens the pulse width, also supplies more power to the load.
''' Lowering the number of steps applied, which shortens the pulse width, supplies less
''' power. The PWM period is defined as the duration of one complete cycle or the total
''' amount of on and off time combined.
'''
''' This demonstation shows a how the changing PWM values can dim the LEDs
'''
''' This demonstration uses CCP1 that is then redirected via the CLC model to OR the value of CCP1 to the CLC1 output, then
''' PPS is used to map the CLC1 outputs to the LEDs
'''
''' Very cool!!!
'''
'''  PIC: 16F18855
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: Xpress Evaluation Board
'''  Date: 19.2.2016
'''

#CHIP 16f18855,32

'Set the PPS for this solution.
#STARTUP InitPPS, 85

Sub InitPPS
    UNLOCKPPS


    'Set up the CLC
    'RC3->TMR2:T2IN
    T2AINPPS = 0x13
    'RA5->CLC1:CLCIN1
    CLCIN1PPS = 0x05

    'Set up the CLC1 to the LEDs
    'RA3->CLC1:CLC1OUT
    RA3PPS = 0x01
    'RA1->CLC1:CLC1OUT
    RA1PPS = 0x01
    'RA2->CLC1:CLC1OUT
    RA2PPS = 0x01
    'RA0->CLC1:CLC1OUT
    RA0PPS = 0x01

    LOCKPPS
End Sub

Dir porta.0 Out
Dir porta.1 Out
Dir porta.2 Out
Dir porta.3 Out

'Variables
Dim Bright As Word Alias CCPR1H, CCPR1L



'Setup CLC configuration
'This simply OR's the CCP1 output to CLC1 then to the CLC1 output. Then, using PPS we redirect CLC1 output to the LEDs

'LC1G1POL not_inverted; LC1G2POL not_inverted; LC1G3POL not_inverted; LC1G4POL not_inverted; LC1POL not_inverted;
CLC1POL = 0x00

'LC1D1S CCP1_OUT;
CLC1SEL0 = 0x13

'LC1D2S CCP1_OUT;
CLC1SEL1 = 0x13

'LC1D3S CLCIN1 (CLCIN1PPS);
CLC1SEL2 = 0x01

'LC1D4S CCP1_OUT;
CLC1SEL3 = 0x13

'LC1G1D3N disabled; LC1G1D2N disabled; LC1G1D4N disabled; LC1G1D1T enabled; LC1G1D3T disabled; LC1G1D2T disabled; LC1G1D4T disabled; LC1G1D1N disabled;
CLC1GLS0 = 0x02

'LC1G2D2N disabled; LC1G2D1N disabled; LC1G2D4N disabled; LC1G2D3N disabled; LC1G2D2T disabled; LC1G2D1T disabled; LC1G2D4T disabled; LC1G2D3T disabled;
CLC1GLS1 = 0x00

'LC1G3D1N disabled; LC1G3D2N disabled; LC1G3D3N disabled; LC1G3D4N disabled; LC1G3D1T disabled; LC1G3D2T disabled; LC1G3D3T disabled; LC1G3D4T disabled;
CLC1GLS2 = 0x00

'LC1G4D1N disabled; LC1G4D2N disabled; LC1G4D3N disabled; LC1G4D4N disabled; LC1G4D1T disabled; LC1G4D2T disabled; LC1G4D3T disabled; LC1G4D4T disabled;
CLC1GLS3 = 0x00

'LC1EN enabled; INTN disabled; INTP disabled; MODE OR-XOR;
CLC1CON = 0x81



'Initialise CCP/PWM - this is standard code - nothing changed
HPWM 1, 40, Bright

'Using Bright as an ALIAS simply set the ADC value to the CCP/PWM registers, an alternative is shown below
Do

    BRIGHT =  FnLSL( ReadAD10( AN4 ), 6 )
    Wait 10 ms

Loop


'Alternative method
Do

    HPWM 1, 40, ReadAD( AN4 )
    Wait 10 ms

Loop



'Code optimisation
' This is used so include in the compiled code
#DEFINE USE_HPWMCCP1 TRUE
' This is not used so optimise
#DEFINE USE_HPWMCCP2 FALSE
' This is not used so optimise
#DEFINE USE_HPWMCCP3 FALSE
' This is not used so optimise
#DEFINE USE_HPWMCCP4 FALSE
' This is not used so optimise
#DEFINE USE_HPWMCCP5 FALSE


#DEFINE USE_HPWM_TIMER2 TRUE
#DEFINE USE_HPWM_TIMER4 FALSE
#DEFINE USE_HPWM_TIMER6 FALSE
#DEFINE USE_HPWM_TIMER7 FALSE

'Optimise A-d.h
'Standard family chips
#DEFINE USE_AD0 FALSE
#DEFINE USE_AD1 FALSE
#DEFINE USE_AD2 FALSE
#DEFINE USE_AD2 FALSE
#DEFINE USE_AD3 FALSE
#DEFINE USE_AD4 TRUE
#DEFINE USE_AD5 FALSE
#DEFINE USE_AD6 FALSE
#DEFINE USE_AD7 FALSE
#DEFINE USE_AD8 FALSE
#DEFINE USE_AD9 FALSE
#DEFINE USE_AD10 FALSE
#DEFINE USE_AD11 FALSE
#DEFINE USE_AD12 FALSE
#DEFINE USE_AD13 FALSE
#DEFINE USE_AD14 FALSE
#DEFINE USE_AD15 FALSE
#DEFINE USE_AD16 FALSE
#DEFINE USE_AD17 FALSE
#DEFINE USE_AD18 FALSE
#DEFINE USE_AD19 FALSE
#DEFINE USE_AD20 FALSE
#DEFINE USE_AD21 FALSE
#DEFINE USE_AD22 FALSE
#DEFINE USE_AD23 FALSE
#DEFINE USE_AD24 FALSE
#DEFINE USE_AD25 FALSE
#DEFINE USE_AD26 FALSE
#DEFINE USE_AD27 FALSE
#DEFINE USE_AD28 FALSE
#DEFINE USE_AD29 FALSE
#DEFINE USE_AD30 FALSE
#DEFINE USE_AD31 FALSE
#DEFINE USE_AD32 FALSE
#DEFINE USE_AD33 FALSE
#DEFINE USE_AD34 FALSE

'Family of chips based on 16f1688x with ADCON3 register
#DEFINE USE_ADA0 FALSE
#DEFINE USE_ADA1 FALSE
#DEFINE USE_ADA2 FALSE
#DEFINE USE_ADA3 FALSE
#DEFINE USE_ADA4 FALSE
#DEFINE USE_ADA5 FALSE
#DEFINE USE_ADA6 FALSE
#DEFINE USE_ADA7 FALSE
#DEFINE USE_ADB0 FALSE
#DEFINE USE_ADB1 FALSE
#DEFINE USE_ADB2 FALSE
#DEFINE USE_ADB3 FALSE
#DEFINE USE_ADB4 FALSE
#DEFINE USE_ADB5 FALSE
#DEFINE USE_ADB6 FALSE
#DEFINE USE_ADB7 FALSE
#DEFINE USE_ADC0 FALSE
#DEFINE USE_ADC1 FALSE
#DEFINE USE_ADC2 FALSE
#DEFINE USE_ADC3 FALSE
#DEFINE USE_ADC4 FALSE
#DEFINE USE_ADC5 FALSE
#DEFINE USE_ADC6 FALSE
#DEFINE USE_ADC7 FALSE
#DEFINE USE_ADD0 FALSE
#DEFINE USE_ADD1 FALSE
#DEFINE USE_ADD2 FALSE
#DEFINE USE_ADD3 FALSE
#DEFINE USE_ADD4 FALSE
#DEFINE USE_ADD5 FALSE
#DEFINE USE_ADD6 FALSE
#DEFINE USE_ADD7 FALSE
#DEFINE USE_ADE0 FALSE
#DEFINE USE_ADE1 FALSE
#DEFINE USE_ADE2 FALSE
