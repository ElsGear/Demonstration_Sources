'''
'''******************************************************************
'''  Lesson 14 - "Reversible with Interrupt"
'''
'''  This lesson combines all of the previous lessons in using the button to reverse the
'''  direction of rotation when the button is pressed using an Interrupt. The speed of rotation is controlled
'''  using the potentiometer.
'''
'''  The program needs to keep track of rotation direction and new code needs to be added
'''  to rotate in the other direction. Lesson 5 rotates right and checks for a '1' in the carry
'''  bit to determine when to restart the sequence. In Lesson 7, the program needs to rotate
'''  both ways and check for a '1' in bit 4 of the display when rotating to the left. When the
'''  '1' shows up in bit 4 of LATC, it will be re-inserted into bit  0 .
'''
'''
'''  LEDs will rotate at a speed that is proportional to the ADC value. The switch will toggle
'''  the direction of the LEDs
'''
'''  PIC: 16f690
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: PICkit 2 Low Pin Count Demo Board
'''  Date: 29.5.2015
'''
''''''******************************************************************
''' See Low Pin Count Demo Board User's Guide for Lesson Information*
''''''*****************************************************************
'''


#CHIP 16f690,16
#OPTION Explicit

'if this is uncommented, the trace under JP5 can be cut
#DEFINE PULL_UPS
'with no affect on the output

Dim _DIRECTION As Byte


'This script allows for the voltage drop and compensates of any losses.
#SCRIPT
    'reference voltage                        5v
    'actual voltage at port when 100% Pot     4.15
    'adc max                                  1023
    'number of graduations requried           15
    reference_voltage = 4.15
    vcc = 5
    numberofgrads = 15
    maxADC = 1023
    ADC_adjustment = int((reference_voltage*100)/(vcc*10))
    ADC_adjustment = int(ADC_adjustment * maxADC / numberofgrads / 10 )

#ENDSCRIPT

#IFDEF PULL_UPS
    'enable the weak pull-up for the switch
    WPUA2 = 1
#ENDIF


#DEFINE SWITCH_DOWN         0
#DEFINE SWITCH_UP           1

#DEFINE LED_RIGHT           TRUE
#DEFINE LED_LEFT            FALSE

#DEFINE SWITCH      PORTA.3

Dim mydelay As Byte

'start from the right to left
_direction = LED_RIGHT

Dir portc Out
portc.3 = 1

'Potentiamtor is connected to RA4...set as input
Dir porta.0 In

'setup switch (SW1)
Dir porta.3 In

'setup Interrupt
IOCA3 = 1
On Interrupt PORTChange  Call InterruptHandler

Do
    mydelay = ReadAD10 ( AN0 )  / ADC_adjustment
    ' decrement the 8 MSbs of the ADC and delay 20ms for each
    Do While ( mydelay <> 0 )
        mydelay--
        Wait 20 ms
    Loop

    If  _direction = LED_RIGHT  Then
        'shift to the right by 1
        Set C Off
        Rotate portc Right

        ' when the last LED is lit, restart the pattern
        If C = 1 Then
            portc.3 = 1
        End If

    Else
        'shift to the left by 1
        Set C Off
        Rotate portc Left

        'when the last LED is lit, restart the pattern
        If  portC.4 = 1 Then
            portC.0 = 1
            portC.4 = 0
        End If
    End If

Loop




Sub InterruptHandler

    If RABIF = 1 Then
        ' SW1 was just pressed
        ' must clear the flag in software
        RABIF = 0
        ' debounce by waiting and seeing if still held down
        Wait 5 ms
        If ( SWITCH = SWITCH_DOWN ) Then
            ' change directions
            _direction = 1 XOR _direction
        End If
    End If

End Sub
