'''
'''******************************************************************
'''  Lesson 7 - "Reversible"
'''
'''  This lesson combines all of the previous lessons in using the button to reverse the
'''  direction of rotation when the button is pressed. The speed of rotation is controlled
'''  using the potentiometer.
'''
'''  The program needs to keep track of rotation direction and new code needs to be added
'''  to rotate in the other direction. Lesson 5 rotates right and checks for a '1' in the carry
'''  bit to determine when to restart the sequence. In Lesson 7, the program needs to rotate
'''  both ways and check for a '1' in bit 4 of the display when rotating to the left. When the
'''  '1' shows up in bit 4 of LATC, it will be re-inserted into bit  0 .
'''
'''  The debounce routine is more in-depth in this lesson because we need to keep in mind
'''  of the scenario of the switch being held down for long periods of time. If SW1 is held
'''  down, the LEDs would change direction rapidly, making the display look like it is out of
'''  control. The above flowchart will only change direction on the first indication of a solid
'''  press and then ignore the switch until it is released and pushed again. The switch must
'''  be pressed for at least the time it takes for the program to check the switch in its loop.
'''  Since the PIC MCU is running at 500 kHz, this will seem instantaneous.
'''
'''  LEDs will rotate at a speed that is proportional to the ADC value. The switch will toggle
'''  the direction of the LEDs
'''
'''  PIC: 16F1825
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: PICkit 2 Low Pin Count Demo Board
'''  Date: 10.4.2015
'''
''''''******************************************************************
''' See Low Pin Count Demo Board User's Guide for Lesson Information*
''''''*****************************************************************
'''


#CHIP 16f1825,8
#OPTION Explicit



'' -------------------LATC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' LED:   ---------------|DS4|DS3|DS2|DS1|-
''-----------------------------------------
''
'This script allows for the voltage drop and compensates of any losses.
#SCRIPT
    'reference voltage                        5v
    'actual voltage at port when 100% Pot     4.15
    'adc max                                  1023
    'number of graduations requried           15
    reference_voltage = 4.15
    vcc = 5
    numberofgrads = 15
    maxADC = 1023
    ADC_adjustment = int((reference_voltage*100)/(vcc*10))
    ADC_adjustment = int(ADC_adjustment * maxADC / numberofgrads / 10 )

#ENDSCRIPT

#DEFINE SWITCH_DOWN         0
#DEFINE SWITCH_UP           1

#DEFINE LED_RIGHT           TRUE
#DEFINE LED_LEFT            FALSE

#DEFINE SWITCH      PORTA.3

Dim mydelay As Byte
Dim DIRECTION As Byte


'start from the right to left
direction = LED_RIGHT

Dir portc Out
portc.3 = 1

'Potentiamtor is connected to RA4...set as input
Dir porta.0 In

'setup switch (SW1)
Dir porta.3 In

Do
    mydelay = ReadAD10 ( AN0 )  / ADC_adjustment
    ' decrement the 8 MSbs of the ADC and delay 20ms for each
    Do While ( mydelay <> 0 )
        mydelay--
        Wait 20 ms
    Loop

    If check_switch = TRUE Then
        ' toggle the direction
        direction = !direction
    End If
    If  direction = LED_RIGHT  Then
        'shift to the right by 1
        Set C Off
        Rotate portc Right

        ' when the last LED is lit, restart the pattern
        If C = 1 Then
            portc.3 = 1
        End If

    Else
        'shift to the left by 1
        Set C Off
        Rotate portc Left

        'when the last LED is lit, restart the pattern
        If  portC.4 = 1 Then
            portC.0 = 1
            portC.4 = 0
        End If
    End If

Loop



'global variable - if button is held down, we don't want to keep on switching directions
Dim previous_state As BIT
previous_state = SWITCH_UP

Function  check_switch
    'switch is normally open to 5V ...when pressed, RA3 is connected to GND
    If (SWITCH = SWITCH_DOWN) Then
        'debounce by delaying and checking if switch is still pressed
        Wait 5 ms
        If ( (previous_state =  SWITCH_DOWN) & (SWITCH = SWITCH_DOWN) ) Then
            ' don't toggle
            check_switch = FALSE
            Exit Function
        Else
            ' check if still down
            If (SWITCH = SWITCH_DOWN) Then
                previous_state = SWITCH_DOWN
                ' reverse the LEDs
                check_switch = TRUE
                Exit Function
            Else
                'switch not properly held down
                previous_state = SWITCH_UP
                ' don't reverse
                check_switch = FALSE
                Exit Function
            End If
        End If
    Else
        'switch not pressed
        previous_state = SWITCH_UP
        'don't reverse
        check_switch = FALSE
        Exit Function
    End If

End Function
