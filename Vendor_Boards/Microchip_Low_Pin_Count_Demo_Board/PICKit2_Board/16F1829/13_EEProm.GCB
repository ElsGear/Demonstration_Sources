'''
'''******************************************************************
''' Lesson 13 - "EEPROM"
'''
''' This lesson will provide code for writing and reading a single byte onto
''' the on-board EEPROM. EEPROM is non-volatile memory, meaning that it does
''' not lose its value when power is shut off. This is unlike RAM, which will
''' lose its value when no power is applied. The EEPROM is useful for storing
''' variables that must still be present during no power.
''' It is also convenient to use if the entire RAM space is used up.
''' Writes and reads to the EEPROM are practically instant and are much faster
''' than program memory operations.

''' Press the switch to save the LED state and then disconnect the power. When
''' power is then applied again, the program will start with that same LED lit.

''' When the lesson is first programmed, no LEDs will light up even with movement
''' of the POT. When the switch is pressed, the corresponding LED will be lit and
''' then the PIC will go to sleep until the switch is pressed again. Each press of
''' the switch saves the ADC value into EEPROM. The PIC uses interrupts to wake up
''' from sleep, take an ADC reading, save to EEPROM, and then goes back to sleep.
'''
'''
'''  PIC: 16F1829
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: PICkit 2 Low Pin Count Demo Board
'''  Date: 10.4.2015
'''
''''''******************************************************************
''' See Low Pin Count Demo Board User's Guide for Lesson Information*
''''''*****************************************************************
'''


#CHIP 16f1829,8
#OPTION Explicit



'This script allows for the voltage drop and compensates of any losses.
#SCRIPT
    'reference voltage                        5v
    'actual voltage at port when 100% Pot     4.15
    'adc max                                  255
    'number of graduations requried           15
    reference_voltage = 4.15
    vcc = 5
    numberofgrads = 15
    maxADC = 255
    ADC_adjustment = int((reference_voltage*100)/(vcc*10))
    ADC_adjustment = int(ADC_adjustment * maxADC / numberofgrads / 10 )

#ENDSCRIPT

#DEFINE DOWN                0
#DEFINE UP                  1

#DEFINE SWITCH              PORTA.3

'' -------------------LATC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' LED:   ---------------|DS4|DS3|DS2|DS1|-
''-----------------------------------------
''

Dim RESTORED_VALUE, ADC_VALUE As Byte

Dir portc Out
portc = 0
Dir porta.3 In


IOCAN3 = 1
IOCIE = 1
On Interrupt PORTChange  Call InterruptHandler

Do
    EPRead ( 0, restored_value)
    portc = restored_value / ADC_adjustment
    Sleep

Loop


Sub InterruptHandler

    If IOCAF3 = 1 Then
        ' SW1 was just pressed
        'must clear the flag in software
        IOCAF3 = 0
        'debounce by waiting and seeing if still held down
        Wait 5 ms
        If ( SWITCH = DOWN ) Then
            adc_value = ReadAD ( AN0 )
            PORTC = adc_value / ADC_adjustment
            EPWrite ( 0, adc_value )

        End If
    End If

End Sub
