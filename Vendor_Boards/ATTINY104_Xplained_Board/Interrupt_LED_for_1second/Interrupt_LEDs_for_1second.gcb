'''A program  for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a one second pulse on the LED using an interrupt
'''
'''
'''@author     EvanV
'''@licence    GPL
'''@version    1.00
'''@date       28/06/2020
'''********************************************************************************

/*
Diagram Author : Ardunaut
                 __________
           VCC--|1       14|--GND (TPI CLK)
           PA0--|2       13|--PB3 (CDC TX) -->USART_Transmit()
(TPI DATA) PA1--|3       12|--PB2 (CDC RX) <--USART_Receive()
   (RESET) PA2--|4       11|--PB1 (BUTTON)
           PA3--|5       10|--PB0
           PA4--|6        9|--PA7
     (LED) PA5--|7        8|--PA6
                \__________/
        Atmel ATtiny104 Xplained Nano
*/


; ----- Configuration
#chip  TINY104, 4
#option Explicit


    #Define SWITCH  portb.1
    #Define LED     porta.5

    'Set Internal Pullup for SWITCH port
    PUEB.PORTB1 = 1
    'Set direction of Switch
    Dir SWITCH in

    'Use Volatile to ensure the compiler does not try to optimize the code
    #option Volatile LED
    'Set direction of LED
    Dir LED out


; ----- Include library


; ----- Constants
     ' 1 second, ie 0.5Hz at a chip frequency of 1mhz
    #define myDelay 15624

    'Do not change constant calculations as these create the CONSTANTS
    #define myDelayL  myDelay AND 255
    #define myDelayH  (myDelay/256)

; ----- Define Hardware settings


    'Set the defaults.. so all the LEDs flash together initially.
    LED = 1

; ----- Variables
    'Load the registers to toogle OCR0A - for different frequencies you need to recalc the 'TCCR0B' mask and the 'myDelay' constant
    OCR0AH = myDelayH
    OCR0AL = myDelayL
    COM0A0 = 1: WGM00 = 0             ' Toggle OC0A, CTC mode
    WGM02  = 1: TCCR0B = TCCR0B OR 3  ' CTC mode, use OCR0A  /64

' Main
' This loop runs over and over forever.

    On Interrupt Timer0Match1 call ISR

    Do

    Loop

END

' ----- Subs

Sub ISR
    LED= !LED
End Sub
