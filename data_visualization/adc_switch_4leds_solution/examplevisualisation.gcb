'''A most simple sample for GCGB and GCB.
'''------------------------------------------------------------------------
'''This program blinks the onboard LED of a microcontroller - simple - the demonstration should work across many microcontrollers.
'''
'''This sample file can be adapted to any of the supported microcontrollers by simply changing the #chip definition - do this by changing to your chip. Other common chips are shown.
'''
'''To make your programmer or your bootloader work, simply do the following.
'''
'''From within this IDE, press function_key F4, then select  'Edit Programmer Preferences'.   This will show you the 'Programmer Preferences', select the 'Programmer' tab.
'''
'''For PIC:  Typically, if you are using a PICKIT2 then select 'Microchip PICKit 2 CLI - Default' will work for you - select and drag this to the top of the dialog area.
'''
'''For AVR:  Typically, for an UNO the programmer 'Arduino UNO/328p@115200' will work, select the option from the list of programmers, then, select 'Edit', 
'''   please edit the communication 'Port', select 'OK', and, then select this option again and drag this to the top of the dialog area.
'''
'''
'''For further adventures with Great Cow BASIC .... Select F4 and then "view Demos" for 1000's of sample programs.
'''
'''
'''Enjoy.
'''
'''
'''************************************************************************

' ----- Configuration

#CHIP PIC16F17126
#OPTION EXPLICIT


    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.6.3
    'PinManager data: Not available (3)
    // Generated for 16F17126
    //
    // Template comment at the start of the config file
    //
    #startup InitPPS, 85
    #define PPSToolPart 16F17126

    Sub InitPPS
              
            'Module: Error
            RC4PPS = 0x0013    'TX1 > RC4
      
    End Sub
    // Template comment at the end of the config file

    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF

    #DEFINE POTENTIOMETER PORTA.0
    Dir     POTENTIOMETER In
    #DEFINE SWITCHIN      PORTA.3
    Dir     SWITCHIN      In
' ----- Main body of program commences here.

// Set this the constant to your desired USART command, HERSEND, Ser1Send, Ser2Send or Ser3Send
#DEFINE DATAVISUALIZERSERIALCOMMAND     HSerSend
// If using HSerSend as your DATAVISUALIZERSERIALCOMMAND and you want to use USART 2,3,4 or 5 then specific this constant
#DEFINE DATAVISUALIZERSERIALPORT 1

'Set the initial LED states - change to suit your configuration

'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDPORT LATC

Dir     RC0         Out
Dir     RC1         Out
Dir     RC2         Out
Dir     RC3         Out

#DEFINE LEDSTATEMACRO RC0 = 0: RC1 = 0: RC2 = 0: RC3 = 1
#DEFINE LEDMASK = 0x1111000
Dim leds
leds = 0b10000

Do Forever

    // Send the data to the DataVisualizer application
    DataVisualizer_sendFrame ( ReadAD12( ANA0) )
    // DataVisualizer_sendFrame ( 0x55 )
    wait 100 ms

    Set C Off
    ' and shift the contents of LEDState
    Rotate leds Right
    ' If the LEDState.0is equal to 1 then the sequence has completed, then set the initial state again, the same operation as the starting LED.
    If C = 1 Then
        leds = 16
    End if
    LEDPORT = ( LEDPORT and LEDMASK ) or leds


Loop

End





#DEFINE DATA_STREAMER_START_BYTE 3      //TRIVIAL DATA STREAMER PROTOCOL START OF FRAME TOKEN
#DEFINE DATA_STREAMER_END_BYTE (255 - DATA_STREAMER_START_BYTE)  
// Data Streamer Protocol end byte is the One's compliment (~) of startByte, 
// e.g. startByte: 0b0000 0011, endByte: 0b1111 1100

sub DataVisualizer_sendFrame(  sendMeasurement as Word ) as Byte

    #IF DEF(DATAVISUALIZERSERIALCOMMAND)

        #IF DEF(DATAVISUALIZERSERIALPORT)
    
            DATAVISUALIZERSERIALCOMMAND DATA_STREAMER_START_BYTE, DATAVISUALIZERSERIALPORT
            DATAVISUALIZERSERIALCOMMAND [BYTE]sendMeasurement, DATAVISUALIZERSERIALPORT     // Low  byte of uint16_t 
            DATAVISUALIZERSERIALCOMMAND sendMeasurement_H, DATAVISUALIZERSERIALPORT         // High byte
            DATAVISUALIZERSERIALCOMMAND SWITCHIN, DATAVISUALIZERSERIALPORT         // SWITCHIN
            DATAVISUALIZERSERIALCOMMAND RC0, DATAVISUALIZERSERIALPORT         // LED
            DATAVISUALIZERSERIALCOMMAND RC1, DATAVISUALIZERSERIALPORT         // LED
            DATAVISUALIZERSERIALCOMMAND RC2, DATAVISUALIZERSERIALPORT         // LED
            DATAVISUALIZERSERIALCOMMAND RC3, DATAVISUALIZERSERIALPORT         // LED
            
            DATAVISUALIZERSERIALCOMMAND DATA_STREAMER_END_BYTE, DATAVISUALIZERSERIALPORT
        
        #ELSE
        
            DATAVISUALIZERSERIALCOMMAND DATA_STREAMER_START_BYTE
            DATAVISUALIZERSERIALCOMMAND [BYTE]sendMeasurement     // Low  byte of uint16_t 
            DATAVISUALIZERSERIALCOMMAND sendMeasurement_H         // High byte
            DATAVISUALIZERSERIALCOMMAND SWITCHIN                  // SWITCHIN
            DATAVISUALIZERSERIALCOMMAND RC0                       // LED
            DATAVISUALIZERSERIALCOMMAND RC1                       // LED
            DATAVISUALIZERSERIALCOMMAND RC2                       // LED
            DATAVISUALIZERSERIALCOMMAND RC3                       // LED
            
            DATAVISUALIZERSERIALCOMMAND DATA_STREAMER_END_BYTE
       
        #ENDIF
    
    #ENDIF
End Sub
